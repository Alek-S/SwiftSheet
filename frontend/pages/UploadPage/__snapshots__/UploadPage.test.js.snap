// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UploadPage matches the snapshot 1`] = `
.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c2 {
  background-color: #fff;
  border: dashed 2px #d9d9d9;
  border-radius: 5px;
  height: 250px;
  width: 70%;
  margin: auto;
  margin-top: 3rem;
}

.c2 img {
  display: block;
  height: 200px;
  width: 80%;
  margin: auto;
}

.c3 {
  background-color: white;
  color: #404040;
  font-family: 'Quicksand',sans-serif;
  font-size: 0.9em;
  color: #848484;
  font-size: 1.2rem;
  text-align: center;
  background-color: transparent;
}

.c5 {
  background-color: white;
  color: #404040;
  font-family: 'Quicksand',sans-serif;
  font-size: 0.9em;
  border-radius: 8px;
  box-shadow: 0px 0px 30px -5px rgba(0,0,0,0.15);
  padding-top: 1.75rem;
  padding-bottom: 1.75rem;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: space-evenly;
  -webkit-justify-content: space-evenly;
  -ms-flex-pack: space-evenly;
  justify-content: space-evenly;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 70%;
  margin: auto;
  text-align: center;
  margin-top: 3.5rem;
}

.c5 input {
  outline: none;
  color: #404040;
  font-family: 'Quicksand',sans-serif;
  background-color: #F1F3F4;
  border: 1px solid #F1F3F4;
  border-radius: 5rem;
  -webkit-transition: all 0.3s;
  transition: all 0.3s;
}

.c5 input::-webkit-input-placeholder {
  font-size: 1rem;
  font-weight: 400;
  font-style: italic;
  font-family: 'Quicksand',sans-serif;
  color: #848484;
}

.c5 input::-moz-placeholder {
  font-size: 1rem;
  font-weight: 400;
  font-style: italic;
  font-family: 'Quicksand',sans-serif;
  color: #848484;
}

.c5 input:-ms-input-placeholder {
  font-size: 1rem;
  font-weight: 400;
  font-style: italic;
  font-family: 'Quicksand',sans-serif;
  color: #848484;
}

.c5 input::placeholder {
  font-size: 1rem;
  font-weight: 400;
  font-style: italic;
  font-family: 'Quicksand',sans-serif;
  color: #848484;
}

.c5 input:hover {
  border: solid 1px #d9d9d9;
}

.c5 input:focus,
.c5 input:active {
  border: solid 1px #46C8F5;
}

.c5 input.true {
  border: 1px solid #ED5050;
}

.c5 input {
  margin: 0 2rem 0 0.25rem;
  padding-left: 1rem;
  width: 140px;
  font-size: 0.9rem;
  font-weight: 400;
  height: 25px;
}

.c5 input::-webkit-input-placeholder {
  color: #BCBCBC;
}

.c5 input::-moz-placeholder {
  color: #BCBCBC;
}

.c5 input:-ms-input-placeholder {
  color: #BCBCBC;
}

.c5 input::placeholder {
  color: #BCBCBC;
}

.c5 select {
  margin-left: 0.25rem;
}

.c6 {
  margin-left: 2rem;
}

.c6 button {
  color: white;
  cursor: pointer;
  outline: none;
  background: linear-gradient(160deg,#57DACB 0%,#55A2ED 100%);
  box-shadow: 0px 5px 40px -5px rgba(0,0,0,0.3);
  border: none;
  font-family: 'Quicksand',sans-serif;
  font-size: 1rem;
  border-radius: 4px;
  margin-left: 1rem;
  padding-top: 5px;
  padding-bottom: 5px;
  width: 70px;
}

.c4 {
  text-align: center;
  opacity: 0;
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 5px;
  background-color: #ED5050;
  -webkit-transition: all 0.3s;
  transition: all 0.3s;
  min-width: 200px;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  margin-top: 2rem;
}

.c4.true {
  opacity: 1;
}

.c0 {
  background-color: white;
  color: #404040;
  font-family: 'Quicksand',sans-serif;
  font-size: 0.9em;
  background-color: #fafafa;
  padding-top: 7rem;
  height: calc(100vh - 100px);
  min-height: 820px;
}

.c7 {
  display: block;
  width: 60%;
  margin: auto;
  text-align: center;
  margin-top: 2rem;
}

.c7 label {
  font-size: 1.1rem;
}

.c7 select {
  font-family: 'Quicksand',sans-serif;
  font-size: 1rem;
  background-color: white;
  margin-left: 0.5rem;
  margin-right: 0.5rem;
  border: solid 1px #d9d9d9;
}

.c7 input[type='submit'] {
  position: relative;
  cursor: no-drop;
  color: #d9d9d9;
  display: block;
  margin: auto;
  font-family: 'Quicksand',sans-serif;
  font-weight: 400;
  font-size: 1.3rem;
  border: 2px solid #d9d9d9;
  border-radius: 30px;
  padding: 10px 30px;
  background: transparent;
  -webkit-transition: all 0.5s;
  transition: all 0.5s;
}

.c7 input[type='submit']:hover {
  background: transparent;
}

.c8 {
  text-align: center;
  opacity: 0;
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 5px;
  background-color: #ED5050;
  -webkit-transition: all 0.3s;
  transition: all 0.3s;
  min-width: 200px;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  margin: auto;
  margin-top: 2rem;
}

.c8.true {
  opacity: 1;
}

.c9 {
  text-align: center;
  opacity: 0;
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 5px;
  background-color: #ED5050;
  -webkit-transition: all 0.3s;
  transition: all 0.3s;
  background-color: #68F6BA;
  color: #404040;
  min-width: 200px;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  margin: auto;
  margin-top: 0rem;
}

.c9.true {
  opacity: 1;
}

.c9 strong {
  font-weight: 600;
}

@media (max-width:500px) {
  .c2 {
    width: 90%;
  }
}

@media (max-width:500px) {
  .c5 {
    width: 90%;
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
  }

  .c5 input,
  .c5 select,
  .c5 section {
    margin: 0.5rem 0;
  }
}

<MockedProvider
  addTypename={false}
  mocks={Array []}
>
  <ApolloProvider
    client={
      ApolloClient {
        "cache": InMemoryCache {
          "addTypename": false,
          "cacheKeyRoot": KeyTrie {
            "weakness": true,
          },
          "config": Object {
            "addTypename": false,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "freezeResults": false,
            "resultCaching": true,
          },
          "data": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "maybeBroadcastWatch": [Function],
          "optimisticData": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "silenceBroadcast": false,
          "storeReader": StoreReader {
            "executeSelectionSet": [Function],
            "executeStoreQuery": [Function],
            "executeSubSelectedArray": [Function],
            "freezeResults": false,
          },
          "storeWriter": StoreWriter {},
          "typenameDocumentCache": Map {},
          "watches": Set {},
        },
        "clearStoreCallbacks": Array [],
        "defaultOptions": Object {},
        "disableNetworkFetches": false,
        "link": MockLink {
          "addTypename": false,
          "mockedResponsesByKey": Object {},
        },
        "localState": LocalState {
          "cache": InMemoryCache {
            "addTypename": false,
            "cacheKeyRoot": KeyTrie {
              "weakness": true,
            },
            "config": Object {
              "addTypename": false,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "freezeResults": false,
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
              "executeSubSelectedArray": [Function],
              "freezeResults": false,
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
          "client": [Circular],
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "queryManager": QueryManager {
          "assumeImmutableResults": false,
          "clientAwareness": Object {
            "name": undefined,
            "version": undefined,
          },
          "dataStore": DataStore {
            "cache": InMemoryCache {
              "addTypename": false,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": false,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
          },
          "fetchQueryRejectFns": Map {},
          "idCounter": 1,
          "inFlightLinkObservables": Map {},
          "link": MockLink {
            "addTypename": false,
            "mockedResponsesByKey": Object {},
          },
          "localState": LocalState {
            "cache": InMemoryCache {
              "addTypename": false,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": false,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
            "client": [Circular],
          },
          "mutationStore": MutationStore {
            "store": Object {},
          },
          "onBroadcast": [Function],
          "pollingInfoByQueryId": Map {},
          "queries": Map {},
          "queryDeduplication": true,
          "queryStore": QueryStore {
            "store": Object {},
          },
          "ssrMode": false,
          "transformCache": WeakMap {},
        },
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": Array [],
        "store": DataStore {
          "cache": InMemoryCache {
            "addTypename": false,
            "cacheKeyRoot": KeyTrie {
              "weakness": true,
            },
            "config": Object {
              "addTypename": false,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "freezeResults": false,
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
              "executeSubSelectedArray": [Function],
              "freezeResults": false,
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
        },
        "typeDefs": undefined,
        "version": "2.6.4",
        "watchQuery": [Function],
      }
    }
  >
    <BrowserRouter>
      <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <ThemeProvider
          theme={
            Object {
              "boxShadow": "0px 5px 40px -5px rgba(0,0,0,0.3)",
              "boxShadowDark": "0px 5px 40px -2px rgba(0,0,0,0.5)",
              "boxShadowLight": "0px 0px 30px -5px rgba(0,0,0,0.15)",
              "color": Object {
                "aqua": "#68F6BA",
                "background": "#fafafa",
                "backgroundDark": "#EAEAEA",
                "backgroundDarkest": "#BCBCBC",
                "blue": "#46C8F5",
                "border": "#d9d9d9",
                "darkBlue": "#2E8AA8",
                "green": "#D8E13F",
                "input": "#F1F3F4",
                "lightBlue": "#97E4FF",
                "lightRed": "#FF8D8D",
                "lightText": "#848484",
                "orange": "#ffbf80",
                "red": "#ED5050",
                "text": "#404040",
                "vividGreen": "#E3FC52",
              },
              "font": Object {
                "header": "'Poiret One', cursive",
                "main": "'Quicksand', sans-serif",
              },
              "gradient": Object {
                "green": "linear-gradient(to bottom, #D8E13F 0%, #BFC644 100%)",
                "greenBlue": " linear-gradient(160deg, #57DACB 0%, #55A2ED 100%)",
                "light": "linear-gradient(to bottom, #ffffff 0%, #f6f6f6 47%, #ededed 100%)",
                "lightRed": "linear-gradient(to bottom, #f39191 0%, #ef6262 100%)",
                "red": "linear-gradient(to bottom, #f07878 0%, #ED5050 100%)",
              },
            }
          }
        >
          <UploadPage>
            <UploadPage__StyledDiv>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "UploadPage__StyledDiv-ahg6u5-0",
                      "isStatic": false,
                      "lastClassName": "c0",
                      "rules": Array [
                        "background-color:white;color:",
                        [Function],
                        ";font-family:",
                        [Function],
                        ";font-size:0.9em;",
                        "background-color:",
                        [Function],
                        ";padding-top:7rem;height:calc(100vh - 100px);min-height:820px;",
                      ],
                    },
                    "displayName": "UploadPage__StyledDiv",
                    "foldedComponentIds": Array [
                      "defaultStyle-g21vfe-0",
                    ],
                    "render": [Function],
                    "styledComponentId": "UploadPage__StyledDiv-ahg6u5-0",
                    "target": "div",
                    "toString": [Function],
                    "usesTheme": true,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="c0"
                >
                  <Filedrop
                    expireIn={72}
                    firstRowHeader={true}
                    onDrop={[Function]}
                    onDropErrorMessage=""
                    password=""
                    setDisableSubmit={[Function]}
                    setExpireIn={[Function]}
                    setHeader={[Function]}
                    setPassword={[Function]}
                    setSuccessMessage={[Function]}
                    setonDropErrorMessage={[Function]}
                    wrongPassword={false}
                  >
                    <Filedrop__StyledSection>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Filedrop__StyledSection-sc-1u7cgvl-0",
                              "isStatic": false,
                              "lastClassName": "c1",
                              "rules": Array [
                                "display:flex;flex-direction:column;align-items:center;",
                              ],
                            },
                            "displayName": "Filedrop__StyledSection",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Filedrop__StyledSection-sc-1u7cgvl-0",
                            "target": "section",
                            "toString": [Function],
                            "usesTheme": false,
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <section
                          className="c1"
                        >
                          <Dropzone
                            accept=".csv"
                            maxSize={2500000}
                            minSize={8}
                            multiple={false}
                            onDragEnter={[Function]}
                            onDragLeave={[Function]}
                            onDrop={[Function]}
                            onDropRejected={[Function]}
                          >
                            <Filedrop__StyledDropzone
                              dragging={false}
                            >
                              <StyledComponent
                                dragging={false}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "Filedrop__StyledDropzone-sc-1u7cgvl-1",
                                      "isStatic": false,
                                      "lastClassName": "c2",
                                      "rules": Array [
                                        "background-color:",
                                        [Function],
                                        ";border:dashed 2px ",
                                        [Function],
                                        ";border-radius:5px;height:250px;width:70%;margin:auto;margin-top:3rem;img{display:block;height:200px;width:80%;margin:auto;}@media (max-width:500px){width:90%;}",
                                      ],
                                    },
                                    "displayName": "Filedrop__StyledDropzone",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "Filedrop__StyledDropzone-sc-1u7cgvl-1",
                                    "target": "div",
                                    "toString": [Function],
                                    "usesTheme": true,
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c2"
                                >
                                  <div
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onDragEnter={[Function]}
                                    onDragLeave={[Function]}
                                    onDragOver={[Function]}
                                    onDrop={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    tabIndex={0}
                                  >
                                    <input
                                      accept=".csv"
                                      autoComplete="off"
                                      multiple={false}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      style={
                                        Object {
                                          "display": "none",
                                        }
                                      }
                                      tabIndex={-1}
                                      type="file"
                                    />
                                    <img
                                      alt="upload-cloud-logo"
                                      src="./assets/images/upload-cloud-light.svg"
                                    />
                                    <Filedrop__StyledText>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "Filedrop__StyledText-sc-1u7cgvl-2",
                                              "isStatic": false,
                                              "lastClassName": "c3",
                                              "rules": Array [
                                                "background-color:white;color:",
                                                [Function],
                                                ";font-family:",
                                                [Function],
                                                ";font-size:0.9em;",
                                                "color:",
                                                [Function],
                                                ";font-size:1.2rem;text-align:center;background-color:transparent;",
                                              ],
                                            },
                                            "displayName": "Filedrop__StyledText",
                                            "foldedComponentIds": Array [
                                              "defaultStyle-g21vfe-0",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "Filedrop__StyledText-sc-1u7cgvl-2",
                                            "target": "div",
                                            "toString": [Function],
                                            "usesTheme": true,
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="c3"
                                        >
                                          Drag
                                           CSV file here
                                        </div>
                                      </StyledComponent>
                                    </Filedrop__StyledText>
                                  </div>
                                </div>
                              </StyledComponent>
                            </Filedrop__StyledDropzone>
                          </Dropzone>
                          <Filedrop__UploadError>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Filedrop__UploadError-sc-1u7cgvl-5",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "text-align:center;opacity:0;color:white;padding:0.5rem 1rem;border-radius:5px;background-color:",
                                      [Function],
                                      ";transition:all 0.3s;&.true{opacity:1;}",
                                      "min-width:200px;width:fit-content;margin-top:2rem;",
                                    ],
                                  },
                                  "displayName": "Filedrop__UploadError",
                                  "foldedComponentIds": Array [
                                    "defaultStyle__ErrorDialog-g21vfe-2",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "Filedrop__UploadError-sc-1u7cgvl-5",
                                  "target": "div",
                                  "toString": [Function],
                                  "usesTheme": true,
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="c4"
                              />
                            </StyledComponent>
                          </Filedrop__UploadError>
                          <Filedrop__Options
                            aria-label="preferences"
                            role="form"
                          >
                            <StyledComponent
                              aria-label="preferences"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Filedrop__Options-sc-1u7cgvl-3",
                                    "isStatic": false,
                                    "lastClassName": "c5",
                                    "rules": Array [
                                      "background-color:white;color:",
                                      [Function],
                                      ";font-family:",
                                      [Function],
                                      ";font-size:0.9em;",
                                      "border-radius:8px;box-shadow:",
                                      [Function],
                                      ";input{outline:none;color:",
                                      [Function],
                                      ";font-family:",
                                      [Function],
                                      ";background-color:",
                                      [Function],
                                      ";border:1px solid ",
                                      [Function],
                                      ";border-radius:5rem;transition:all 0.3s;::placeholder{font-size:1rem;font-weight:400;font-style:italic;font-family:",
                                      [Function],
                                      ";color:",
                                      [Function],
                                      ";}&:hover{border:solid 1px ",
                                      [Function],
                                      ";}&:focus,&:active{border:solid 1px ",
                                      [Function],
                                      ";}&.true{border:1px solid ",
                                      [Function],
                                      ";}}",
                                      "padding-top:1.75rem;padding-bottom:1.75rem;display:flex;flex-direction:row;flex-wrap:wrap;justify-content:space-evenly;align-items:center;width:70%;margin:auto;text-align:center;margin-top:3.5rem;input{margin:0 2rem 0 0.25rem;padding-left:1rem;width:140px;font-size:0.9rem;font-weight:400;height:25px;::placeholder{color:",
                                      [Function],
                                      ";}}select{margin-left:0.25rem;}@media (max-width:500px){width:90%;flex-direction:column;input,select,section{margin:0.5rem 0;}}",
                                    ],
                                  },
                                  "displayName": "Filedrop__Options",
                                  "foldedComponentIds": Array [
                                    "defaultStyle-g21vfe-0",
                                    "defaultStyle__Card-g21vfe-1",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "Filedrop__Options-sc-1u7cgvl-3",
                                  "target": "div",
                                  "toString": [Function],
                                  "usesTheme": true,
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              role="form"
                            >
                              <div
                                aria-label="preferences"
                                className="c5"
                                role="form"
                              >
                                <section
                                  aria-label="set password"
                                >
                                  Password:
                                  <input
                                    autoComplete="new-password"
                                    onChange={[Function]}
                                    placeholder="enter password"
                                    type="password"
                                    value=""
                                  />
                                </section>
                                <section
                                  aria-label="set expiration"
                                >
                                  Expires In:
                                  <select
                                    onChange={[Function]}
                                    value={72}
                                  >
                                    <option
                                      value={1}
                                    >
                                      1 Hour
                                    </option>
                                    <option
                                      value={4}
                                    >
                                      4 Hours
                                    </option>
                                    <option
                                      value={8}
                                    >
                                      8 Hours
                                    </option>
                                    <option
                                      value={24}
                                    >
                                      1 Day
                                    </option>
                                    <option
                                      value={72}
                                    >
                                      3 Days
                                    </option>
                                    <option
                                      value={120}
                                    >
                                      5 Days
                                    </option>
                                  </select>
                                </section>
                                <section
                                  aria-label="toggle first row header"
                                >
                                  <Filedrop__HeaderToggle
                                    active={true}
                                  >
                                    <StyledComponent
                                      active={true}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Filedrop__HeaderToggle-sc-1u7cgvl-4",
                                            "isStatic": false,
                                            "lastClassName": "c6",
                                            "rules": Array [
                                              "margin-left:2rem;button{color:white;cursor:pointer;outline:none;background:",
                                              [Function],
                                              ";box-shadow:",
                                              [Function],
                                              ";border:none;font-family:",
                                              [Function],
                                              ";font-size:1rem;border-radius:4px;margin-left:1rem;padding-top:5px;padding-bottom:5px;width:70px;}",
                                            ],
                                          },
                                          "displayName": "Filedrop__HeaderToggle",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Filedrop__HeaderToggle-sc-1u7cgvl-4",
                                          "target": "label",
                                          "toString": [Function],
                                          "usesTheme": true,
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <label
                                        className="c6"
                                      >
                                        <span>
                                          First Row Header:
                                        </span>
                                        <button
                                          onClick={[Function]}
                                        >
                                          Yes
                                        </button>
                                      </label>
                                    </StyledComponent>
                                  </Filedrop__HeaderToggle>
                                </section>
                              </div>
                            </StyledComponent>
                          </Filedrop__Options>
                          <Filedrop__UploadError>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Filedrop__UploadError-sc-1u7cgvl-5",
                                    "isStatic": false,
                                    "lastClassName": "c4",
                                    "rules": Array [
                                      "text-align:center;opacity:0;color:white;padding:0.5rem 1rem;border-radius:5px;background-color:",
                                      [Function],
                                      ";transition:all 0.3s;&.true{opacity:1;}",
                                      "min-width:200px;width:fit-content;margin-top:2rem;",
                                    ],
                                  },
                                  "displayName": "Filedrop__UploadError",
                                  "foldedComponentIds": Array [
                                    "defaultStyle__ErrorDialog-g21vfe-2",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "Filedrop__UploadError-sc-1u7cgvl-5",
                                  "target": "div",
                                  "toString": [Function],
                                  "usesTheme": true,
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="c4"
                              >
                                ⚠️ Check Password Length
                              </div>
                            </StyledComponent>
                          </Filedrop__UploadError>
                        </section>
                      </StyledComponent>
                    </Filedrop__StyledSection>
                  </Filedrop>
                  <UploadPage__StyledForm
                    disableSubmit={true}
                  >
                    <StyledComponent
                      disableSubmit={true}
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "UploadPage__StyledForm-ahg6u5-1",
                            "isStatic": false,
                            "lastClassName": "c7",
                            "rules": Array [
                              "display:block;width:60%;margin:auto;text-align:center;margin-top:2rem;label{font-size:1.1rem;}select{font-family:",
                              [Function],
                              ";font-size:1rem;background-color:white;margin-left:0.5rem;margin-right:0.5rem;border:solid 1px ",
                              [Function],
                              ";}input[type='submit']{position:relative;cursor:",
                              [Function],
                              ";color:",
                              [Function],
                              ";display:block;margin:auto;font-family:",
                              [Function],
                              ";font-weight:400;font-size:1.3rem;border:",
                              [Function],
                              ";border-radius:30px;padding:10px 30px;background:",
                              [Function],
                              ";box-shadow:",
                              [Function],
                              ";transition:all 0.5s;&:hover{background:",
                              [Function],
                              ";box-shadow:",
                              [Function],
                              ";}}",
                            ],
                          },
                          "displayName": "UploadPage__StyledForm",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "UploadPage__StyledForm-ahg6u5-1",
                          "target": "form",
                          "toString": [Function],
                          "usesTheme": true,
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <form
                        className="c7"
                      >
                        <Mutation
                          mutation={
                            Object {
                              "definitions": Array [
                                Object {
                                  "directives": Array [],
                                  "kind": "OperationDefinition",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "UPLOAD_SHEET",
                                  },
                                  "operation": "mutation",
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [
                                          Object {
                                            "kind": "Argument",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "sheetData",
                                            },
                                            "value": Object {
                                              "kind": "Variable",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "sheetData",
                                              },
                                            },
                                          },
                                          Object {
                                            "kind": "Argument",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "expireIn",
                                            },
                                            "value": Object {
                                              "kind": "Variable",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "expireIn",
                                              },
                                            },
                                          },
                                          Object {
                                            "kind": "Argument",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "password",
                                            },
                                            "value": Object {
                                              "kind": "Variable",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "password",
                                              },
                                            },
                                          },
                                        ],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "createSheet",
                                        },
                                        "selectionSet": Object {
                                          "kind": "SelectionSet",
                                          "selections": Array [
                                            Object {
                                              "alias": undefined,
                                              "arguments": Array [],
                                              "directives": Array [],
                                              "kind": "Field",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "_id",
                                              },
                                              "selectionSet": undefined,
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                  "variableDefinitions": Array [
                                    Object {
                                      "defaultValue": undefined,
                                      "directives": Array [],
                                      "kind": "VariableDefinition",
                                      "type": Object {
                                        "kind": "NonNullType",
                                        "type": Object {
                                          "kind": "NamedType",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "String",
                                          },
                                        },
                                      },
                                      "variable": Object {
                                        "kind": "Variable",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "sheetData",
                                        },
                                      },
                                    },
                                    Object {
                                      "defaultValue": undefined,
                                      "directives": Array [],
                                      "kind": "VariableDefinition",
                                      "type": Object {
                                        "kind": "NonNullType",
                                        "type": Object {
                                          "kind": "NamedType",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "Int",
                                          },
                                        },
                                      },
                                      "variable": Object {
                                        "kind": "Variable",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "expireIn",
                                        },
                                      },
                                    },
                                    Object {
                                      "defaultValue": undefined,
                                      "directives": Array [],
                                      "kind": "VariableDefinition",
                                      "type": Object {
                                        "kind": "NamedType",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "String",
                                        },
                                      },
                                      "variable": Object {
                                        "kind": "Variable",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "password",
                                        },
                                      },
                                    },
                                  ],
                                },
                              ],
                              "kind": "Document",
                              "loc": Object {
                                "end": 196,
                                "start": 0,
                              },
                            }
                          }
                          onCompleted={[Function]}
                        >
                          <div>
                            <input
                              disabled={true}
                              onClick={[Function]}
                              type="submit"
                              value="Upload File"
                            />
                          </div>
                        </Mutation>
                        <UploadPage__UploadError>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "UploadPage__UploadError-ahg6u5-2",
                                  "isStatic": false,
                                  "lastClassName": "c8",
                                  "rules": Array [
                                    "text-align:center;opacity:0;color:white;padding:0.5rem 1rem;border-radius:5px;background-color:",
                                    [Function],
                                    ";transition:all 0.3s;&.true{opacity:1;}",
                                    "min-width:200px;width:fit-content;margin:auto;margin-top:2rem;",
                                  ],
                                },
                                "displayName": "UploadPage__UploadError",
                                "foldedComponentIds": Array [
                                  "defaultStyle__ErrorDialog-g21vfe-2",
                                ],
                                "render": [Function],
                                "styledComponentId": "UploadPage__UploadError-ahg6u5-2",
                                "target": "div",
                                "toString": [Function],
                                "usesTheme": true,
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c8"
                            />
                          </StyledComponent>
                        </UploadPage__UploadError>
                        <UploadPage__UploadSuccess>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "UploadPage__UploadSuccess-ahg6u5-3",
                                  "isStatic": false,
                                  "lastClassName": "c9",
                                  "rules": Array [
                                    "text-align:center;opacity:0;color:white;padding:0.5rem 1rem;border-radius:5px;background-color:",
                                    [Function],
                                    ";transition:all 0.3s;&.true{opacity:1;}",
                                    "background-color:",
                                    [Function],
                                    ";color:",
                                    [Function],
                                    ";strong{font-weight:600;}",
                                    "min-width:200px;width:fit-content;margin:auto;margin-top:0rem;",
                                  ],
                                },
                                "displayName": "UploadPage__UploadSuccess",
                                "foldedComponentIds": Array [
                                  "defaultStyle__ErrorDialog-g21vfe-2",
                                  "defaultStyle__SuccessDialog-g21vfe-3",
                                ],
                                "render": [Function],
                                "styledComponentId": "UploadPage__UploadSuccess-ahg6u5-3",
                                "target": "div",
                                "toString": [Function],
                                "usesTheme": true,
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c9"
                            >
                              File to upload: 
                              <strong />
                            </div>
                          </StyledComponent>
                        </UploadPage__UploadSuccess>
                      </form>
                    </StyledComponent>
                  </UploadPage__StyledForm>
                </div>
              </StyledComponent>
            </UploadPage__StyledDiv>
          </UploadPage>
        </ThemeProvider>
      </Router>
    </BrowserRouter>
  </ApolloProvider>
</MockedProvider>
`;
