// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UploadPage matches the snapshot 1`] = `
.c1 {
  background-color: white;
  color: #404040;
  font-family: 'Quicksand',sans-serif;
  font-size: 0.9em;
}

.c8 {
  border-radius: 8px;
  box-shadow: 0px 5px 40px -5px rgba(0,0,0,0.15);
}

.c8 input {
  outline: none;
  color: #404040;
  font-family: 'Quicksand',sans-serif;
  background-color: #F1F3F4;
  border: 1px solid #F1F3F4;
  border-radius: 5rem;
  -webkit-transition: all 0.3s;
  transition: all 0.3s;
}

.c8 input::-webkit-input-placeholder {
  font-size: 1rem;
  font-weight: 400;
  font-style: italic;
  font-family: 'Quicksand',sans-serif;
  color: #848484;
}

.c8 input::-moz-placeholder {
  font-size: 1rem;
  font-weight: 400;
  font-style: italic;
  font-family: 'Quicksand',sans-serif;
  color: #848484;
}

.c8 input:-ms-input-placeholder {
  font-size: 1rem;
  font-weight: 400;
  font-style: italic;
  font-family: 'Quicksand',sans-serif;
  color: #848484;
}

.c8 input::placeholder {
  font-size: 1rem;
  font-weight: 400;
  font-style: italic;
  font-family: 'Quicksand',sans-serif;
  color: #848484;
}

.c8 input:hover {
  border: solid 1px #d9d9d9;
}

.c8 input:focus,
.c8 input:active {
  border: solid 1px #46C8F5;
}

.c8 input.true {
  border: 1px solid #ED5050;
}

.c6 {
  text-align: center;
  opacity: 0;
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 5px;
  background-color: #ED5050;
  -webkit-transition: all 0.3s;
  transition: all 0.3s;
}

.c6.true {
  opacity: 1;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c3 {
  background-color: #fff;
  border: dashed 2px #d9d9d9;
  border-radius: 5px;
  height: 250px;
  width: 70%;
  margin: auto;
  margin-top: 3rem;
}

.c3 img {
  display: block;
  height: 200px;
  width: 80%;
  margin: auto;
}

.c4 {
  color: #848484;
  font-size: 1.2rem;
  text-align: center;
  background-color: transparent;
}

.c7 {
  padding-top: 1.75rem;
  padding-bottom: 1.75rem;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: space-evenly;
  -webkit-justify-content: space-evenly;
  -ms-flex-pack: space-evenly;
  justify-content: space-evenly;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 70%;
  margin: auto;
  text-align: center;
  margin-top: 3.5rem;
}

.c7 input {
  margin: 0 2rem 0 0.25rem;
  padding-left: 1rem;
  width: 140px;
  font-size: 0.9rem;
  font-weight: 400;
  height: 25px;
}

.c7 input::-webkit-input-placeholder {
  color: #BCBCBC;
}

.c7 input::-moz-placeholder {
  color: #BCBCBC;
}

.c7 input:-ms-input-placeholder {
  color: #BCBCBC;
}

.c7 input::placeholder {
  color: #BCBCBC;
}

.c7 select {
  margin-left: 0.25rem;
}

.c9 {
  margin-left: 2rem;
}

.c9 button {
  color: white;
  cursor: pointer;
  outline: none;
  background: linear-gradient(160deg,#57DACB 0%,#55A2ED 100%);
  box-shadow: 0px 5px 40px -5px rgba(0,0,0,0.3);
  border: none;
  font-family: 'Quicksand',sans-serif;
  font-size: 1rem;
  border-radius: 4px;
  margin-left: 1rem;
  padding-top: 5px;
  padding-bottom: 5px;
  width: 70px;
}

.c5 {
  min-width: 200px;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  margin-top: 2rem;
}

.c0 {
  background-color: #fafafa;
  padding-top: 7rem;
  height: calc(100vh - 100px);
}

.c10 {
  display: block;
  width: 60%;
  margin: auto;
  text-align: center;
  margin-top: 2rem;
}

.c10 label {
  font-size: 1.1rem;
}

.c10 select {
  font-family: 'Quicksand',sans-serif;
  font-size: 1rem;
  background-color: white;
  margin-left: 0.5rem;
  margin-right: 0.5rem;
  border: solid 1px #d9d9d9;
}

.c10 input[type='submit'] {
  position: relative;
  cursor: no-drop;
  color: #d9d9d9;
  display: block;
  margin: auto;
  font-family: 'Quicksand',sans-serif;
  font-weight: 400;
  font-size: 1.3rem;
  border: 2px solid #d9d9d9;
  border-radius: 30px;
  padding: 10px 30px;
  background: transparent;
  -webkit-transition: all 0.5s;
  transition: all 0.5s;
}

.c10 input[type='submit']:hover {
  background: transparent;
}

.c11 {
  min-width: 200px;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  margin: auto;
  margin-top: 2rem;
}

<MockedProvider
  addTypename={false}
  mocks={Array []}
>
  <ApolloProvider
    client={
      ApolloClient {
        "__operations_cache__": Map {},
        "cache": InMemoryCache {
          "addTypename": false,
          "cacheKeyRoot": CacheKeyNode {
            "children": null,
            "key": null,
          },
          "config": Object {
            "addTypename": false,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "resultCaching": true,
          },
          "data": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "maybeBroadcastWatch": [Function],
          "optimisticData": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "silenceBroadcast": false,
          "storeReader": StoreReader {
            "cacheKeyRoot": CacheKeyNode {
              "children": null,
              "key": null,
            },
            "executeSelectionSet": [Function],
            "executeStoreQuery": [Function],
          },
          "storeWriter": StoreWriter {},
          "typenameDocumentCache": Map {},
          "watches": Set {},
        },
        "clearStoreCallbacks": Array [],
        "clientAwareness": Object {},
        "defaultOptions": Object {},
        "disableNetworkFetches": false,
        "link": ApolloLink {
          "request": [Function],
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": Array [],
        "ssrMode": false,
        "store": DataStore {
          "cache": InMemoryCache {
            "addTypename": false,
            "cacheKeyRoot": CacheKeyNode {
              "children": null,
              "key": null,
            },
            "config": Object {
              "addTypename": false,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "cacheKeyRoot": CacheKeyNode {
                "children": null,
                "key": null,
              },
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
        },
        "version": "2.4.12",
        "watchQuery": [Function],
      }
    }
  >
    <BrowserRouter>
      <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <ThemeProvider
          theme={
            Object {
              "boxShadow": "0px 5px 40px -5px rgba(0,0,0,0.3)",
              "boxShadowDark": "0px 5px 40px -2px rgba(0,0,0,0.5)",
              "boxShadowLight": "0px 5px 40px -5px rgba(0,0,0,0.15)",
              "color": Object {
                "aqua": "#68F6BA",
                "background": "#fafafa",
                "backgroundDark": "#EAEAEA",
                "backgroundDarkest": "#BCBCBC",
                "blue": "#46C8F5",
                "border": "#d9d9d9",
                "darkBlue": "#2E8AA8",
                "green": "#D8E13F",
                "input": "#F1F3F4",
                "lightBlue": "#97E4FF",
                "lightRed": "#FF8D8D",
                "lightText": "#848484",
                "orange": "#ffbf80",
                "red": "#ED5050",
                "text": "#404040",
                "vividGreen": "#E3FC52",
              },
              "font": Object {
                "header": "'Poiret One', cursive",
                "main": "'Quicksand', sans-serif",
              },
              "gradient": Object {
                "green": "linear-gradient(to bottom, #D8E13F 0%, #BFC644 100%)",
                "greenBlue": " linear-gradient(160deg, #57DACB 0%, #55A2ED 100%)",
                "light": "linear-gradient(to bottom, #ffffff 0%, #f6f6f6 47%, #ededed 100%)",
                "lightRed": "linear-gradient(to bottom, #f39191 0%, #ef6262 100%)",
                "red": "linear-gradient(to bottom, #f07878 0%, #ED5050 100%)",
              },
            }
          }
        >
          <UploadPage>
            <UploadPage__StyledDiv>
              <defaultStyle
                className="c0"
              >
                <div
                  className="c0 c1"
                >
                  <Filedrop
                    expireIn={72}
                    firstRowHeader={true}
                    onDrop={[Function]}
                    password=""
                    setExpireIn={[Function]}
                    setHeader={[Function]}
                    setPassword={[Function]}
                    wrongPassword={false}
                  >
                    <Filedrop__StyledSection>
                      <section
                        className="c2"
                      >
                        <Filedrop__StyledDropzone
                          accept="text/csv"
                          maxSize={2500000}
                          minSize={8}
                          multiple={false}
                          onDragEnter={[Function]}
                          onDragLeave={[Function]}
                          onDrop={[Function]}
                          onDropRejected={[Function]}
                        >
                          <t
                            accept="text/csv"
                            className="c3"
                            disableClick={false}
                            disablePreview={false}
                            disabled={false}
                            getDataTransferItems={[Function]}
                            inputProps={Object {}}
                            maxSize={2500000}
                            minSize={8}
                            multiple={false}
                            onDragEnter={[Function]}
                            onDragLeave={[Function]}
                            onDrop={[Function]}
                            onDropRejected={[Function]}
                            preventDropOnDocument={true}
                          >
                            <div
                              aria-disabled={false}
                              className="c3"
                              onClick={[Function]}
                              onDragEnter={[Function]}
                              onDragLeave={[Function]}
                              onDragOver={[Function]}
                              onDragStart={[Function]}
                              onDrop={[Function]}
                              style={
                                Object {
                                  "position": "relative",
                                }
                              }
                            >
                              <img
                                alt="upload-cloud-logo"
                                src="./assets/images/upload-cloud-light.svg"
                              />
                              <Filedrop__StyledText
                                dragging={false}
                              >
                                <defaultStyle
                                  className="c4"
                                  dragging={false}
                                >
                                  <div
                                    className="c4 c1"
                                  >
                                    Drag
                                     CSV file here
                                  </div>
                                </defaultStyle>
                              </Filedrop__StyledText>
                              <input
                                accept="text/csv"
                                autoComplete="off"
                                disabled={false}
                                multiple={false}
                                onChange={[Function]}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "left": 0,
                                    "opacity": 0.00001,
                                    "pointerEvents": "none",
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                  }
                                }
                                type="file"
                              />
                            </div>
                          </t>
                        </Filedrop__StyledDropzone>
                        <Filedrop__UploadError>
                          <defaultStyle__ErrorDialog
                            className="c5"
                          >
                            <div
                              className="c5 c6"
                            />
                          </defaultStyle__ErrorDialog>
                        </Filedrop__UploadError>
                        <Filedrop__Options
                          aria-label="preferences"
                          role="form"
                        >
                          <defaultStyle__Card
                            aria-label="preferences"
                            className="c7"
                            role="form"
                          >
                            <defaultStyle
                              aria-label="preferences"
                              className="c7 c8"
                              role="form"
                            >
                              <div
                                aria-label="preferences"
                                className="c7 c8 c1"
                                role="form"
                              >
                                <section
                                  aria-label="set password"
                                >
                                  Password:
                                  <input
                                    autoComplete="new-password"
                                    onChange={[Function]}
                                    placeholder="enter password"
                                    type="password"
                                    value=""
                                  />
                                </section>
                                <section
                                  aria-label="set expiration"
                                >
                                  Expires In:
                                  <select
                                    onChange={[Function]}
                                    value={72}
                                  >
                                    <option
                                      value={1}
                                    >
                                      1 Hour
                                    </option>
                                    <option
                                      value={4}
                                    >
                                      4 Hours
                                    </option>
                                    <option
                                      value={8}
                                    >
                                      8 Hours
                                    </option>
                                    <option
                                      value={24}
                                    >
                                      1 Day
                                    </option>
                                    <option
                                      value={72}
                                    >
                                      3 Days
                                    </option>
                                    <option
                                      value={120}
                                    >
                                      5 Days
                                    </option>
                                  </select>
                                </section>
                                <section
                                  aria-label="toggle first row header"
                                >
                                  <Filedrop__HeaderToggle
                                    active={true}
                                  >
                                    <label
                                      className="c9"
                                    >
                                      <span>
                                        First Row Header:
                                      </span>
                                      <button
                                        onClick={[Function]}
                                      >
                                        Yes
                                      </button>
                                    </label>
                                  </Filedrop__HeaderToggle>
                                </section>
                              </div>
                            </defaultStyle>
                          </defaultStyle__Card>
                        </Filedrop__Options>
                        <Filedrop__UploadError>
                          <defaultStyle__ErrorDialog
                            className="c5"
                          >
                            <div
                              className="c5 c6"
                            >
                              ⚠️ Check Password Length
                            </div>
                          </defaultStyle__ErrorDialog>
                        </Filedrop__UploadError>
                      </section>
                    </Filedrop__StyledSection>
                  </Filedrop>
                  <UploadPage__StyledForm
                    disableSubmit={true}
                  >
                    <form
                      className="c10"
                    >
                      <Mutation
                        mutation={
                          Object {
                            "definitions": Array [
                              Object {
                                "directives": Array [],
                                "kind": "OperationDefinition",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "UPLOAD_SHEET",
                                },
                                "operation": "mutation",
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [
                                        Object {
                                          "kind": "Argument",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "sheetData",
                                          },
                                          "value": Object {
                                            "kind": "Variable",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "sheetData",
                                            },
                                          },
                                        },
                                        Object {
                                          "kind": "Argument",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "expireIn",
                                          },
                                          "value": Object {
                                            "kind": "Variable",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "expireIn",
                                            },
                                          },
                                        },
                                        Object {
                                          "kind": "Argument",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "password",
                                          },
                                          "value": Object {
                                            "kind": "Variable",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "password",
                                            },
                                          },
                                        },
                                      ],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "createSheet",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "_id",
                                            },
                                            "selectionSet": undefined,
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                                "variableDefinitions": Array [
                                  Object {
                                    "defaultValue": undefined,
                                    "directives": Array [],
                                    "kind": "VariableDefinition",
                                    "type": Object {
                                      "kind": "NonNullType",
                                      "type": Object {
                                        "kind": "NamedType",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "JSON",
                                        },
                                      },
                                    },
                                    "variable": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "sheetData",
                                      },
                                    },
                                  },
                                  Object {
                                    "defaultValue": undefined,
                                    "directives": Array [],
                                    "kind": "VariableDefinition",
                                    "type": Object {
                                      "kind": "NonNullType",
                                      "type": Object {
                                        "kind": "NamedType",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "Int",
                                        },
                                      },
                                    },
                                    "variable": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "expireIn",
                                      },
                                    },
                                  },
                                  Object {
                                    "defaultValue": undefined,
                                    "directives": Array [],
                                    "kind": "VariableDefinition",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "String",
                                      },
                                    },
                                    "variable": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "password",
                                      },
                                    },
                                  },
                                ],
                              },
                            ],
                            "kind": "Document",
                            "loc": Object {
                              "end": 187,
                              "start": 0,
                            },
                          }
                        }
                        onCompleted={[Function]}
                      >
                        <div>
                          <input
                            disabled={true}
                            onClick={[Function]}
                            type="submit"
                            value="Upload File"
                          />
                        </div>
                      </Mutation>
                      <UploadPage__UploadError>
                        <defaultStyle__ErrorDialog
                          className="c11"
                        >
                          <div
                            className="c11 c6"
                          />
                        </defaultStyle__ErrorDialog>
                      </UploadPage__UploadError>
                    </form>
                  </UploadPage__StyledForm>
                </div>
              </defaultStyle>
            </UploadPage__StyledDiv>
          </UploadPage>
        </ThemeProvider>
      </Router>
    </BrowserRouter>
  </ApolloProvider>
</MockedProvider>
`;
